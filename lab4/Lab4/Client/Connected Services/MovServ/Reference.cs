//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.MovServ {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MovServ.IMovieServ")]
    public interface IMovieServ {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/GetAll", ReplyAction="http://tempuri.org/IMovieServ/GetAllResponse")]
        Lib.Movie[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/GetAll", ReplyAction="http://tempuri.org/IMovieServ/GetAllResponse")]
        System.Threading.Tasks.Task<Lib.Movie[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/Add", ReplyAction="http://tempuri.org/IMovieServ/AddResponse")]
        int Add(Lib.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/Add", ReplyAction="http://tempuri.org/IMovieServ/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(Lib.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/Get", ReplyAction="http://tempuri.org/IMovieServ/GetResponse")]
        Lib.Movie Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/Get", ReplyAction="http://tempuri.org/IMovieServ/GetResponse")]
        System.Threading.Tasks.Task<Lib.Movie> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/Update", ReplyAction="http://tempuri.org/IMovieServ/UpdateResponse")]
        Lib.Movie Update(Lib.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/Update", ReplyAction="http://tempuri.org/IMovieServ/UpdateResponse")]
        System.Threading.Tasks.Task<Lib.Movie> UpdateAsync(Lib.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/Delete", ReplyAction="http://tempuri.org/IMovieServ/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/Delete", ReplyAction="http://tempuri.org/IMovieServ/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/GetData", ReplyAction="http://tempuri.org/IMovieServ/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/GetData", ReplyAction="http://tempuri.org/IMovieServ/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IMovieServ/GetDataUsingDataContractResponse")]
        MoviesServer.CompositeType GetDataUsingDataContract(MoviesServer.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieServ/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IMovieServ/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MoviesServer.CompositeType> GetDataUsingDataContractAsync(MoviesServer.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMovieServChannel : Client.MovServ.IMovieServ, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MovieServClient : System.ServiceModel.ClientBase<Client.MovServ.IMovieServ>, Client.MovServ.IMovieServ {
        
        public MovieServClient() {
        }
        
        public MovieServClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MovieServClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieServClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieServClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Lib.Movie[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Lib.Movie[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Add(Lib.Movie movie) {
            return base.Channel.Add(movie);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(Lib.Movie movie) {
            return base.Channel.AddAsync(movie);
        }
        
        public Lib.Movie Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<Lib.Movie> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public Lib.Movie Update(Lib.Movie movie) {
            return base.Channel.Update(movie);
        }
        
        public System.Threading.Tasks.Task<Lib.Movie> UpdateAsync(Lib.Movie movie) {
            return base.Channel.UpdateAsync(movie);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MoviesServer.CompositeType GetDataUsingDataContract(MoviesServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MoviesServer.CompositeType> GetDataUsingDataContractAsync(MoviesServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
